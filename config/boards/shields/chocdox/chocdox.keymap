/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |Q/esc| W/( |  E  |  R  |  T   |       |  Y  |  U/) |I/WIN|  O  |   P  |
// |A/sft|  S  |  D  |F/Ctr|  G   |       |  H  |J/ALT |  K  |  L  |'/shft|
// |Z/hom|X/TAB|  C  |  V  |  B   |       |  N  |  M   |  ,  |  .  |//End |
//       | LENC| DEL | RET | NUM  |       | NAV | SPACE| BSPC|RENC |
                        bindings = <
   &mt ESC Q   &mt LPAR W &kp E   &kp R        &kp T        &kp Y &mt RPAR U  &mt LGUI I &kp O    &kp P
   &mt LSHFT A &kp S      &kp D   &mt LCTRL F  &kp G        &kp H &mt LALT J  &kp K      &kp L    &mt RSFT APOS
   &mt HOME Z  &mt TAB X  &kp C   &kp V        &kp B        &kp N &kp M       &kp COMMA  &kp DOT  &mt END FSLH
               &none      &kp DEL &kp RET      &to 1        &to 2 &kp SPACE   &kp BSPC   &none
                        >;

                        sensor-bindings = <&inc_dec_kp LEFT RIGHT &inc_dec_kp UP DOWN>; //Left enc does left and right arrow, right encoder does up and down arrow. If one doesn't work it's because slave side encoders are nonfunctional as of 3/29/21
                };
                num_layer {
// -----------------------------------------------------------------------------------------
// |  1  |  2  |  3  |  4  |  5  |       |  6  |  7  |  8  |  9  |  0 |
// |Shift|  +  |  -  |  *  |  /  |       |  (  |  )  |  [  |  ]  |  ; |
// |  =  | ~/` |  _  |  \  | CAPS|       | BLE |     |  ,  |  .  |Shft|
//       | LENC| DEL | RET | NAV |       | ALP |SPACE| BSPC|RENC |
                        bindings = <
   &kp N1    &kp N2    &kp N3       &kp N4           &kp N5           &kp N6         &kp N7    &kp N8    &kp N9   &kp N0
   &kp LSHFT &kp PLUS  &kp KP_MINUS &kp KP_MULTIPLY  &kp FSLH         &kp LPAR       &kp RPAR  &kp LBKT  &kp RBKT &kp SEMI
   &kp EQUAL &kp GRAVE &kp UNDER    &kp BSLH         &kp CAPS         &mo 4          &none     &kp COMMA &kp DOT  &kp RSHFT
             &none     &kp DEL      &kp RET          &to 2            &to 0          &kp SPACE &kp BSPC  &none
                        >;                    
                };

                sym_layer {
// -----------------------------------------------------------------------------------------
// |  Z  |  X  |     |  C  |  V  |       |  F  |     |  Up |     |Reset|
// | Ctrl|     |     |     |  F6 |       | F7  | Left|Down |Right|Shift|
// |  F1 | F2  | F3  | F4  |  F5 |       | F8  | F9  | F10 | F11 | F12 |
//       | LENC| DEL | RET | ALP |       | NUM |SPACE| BSPC|RENC |
                        bindings = <
   &kp Z      &kp X    &none   &kp C   &kp V         &kp F  &none     &kp UP   &none     &bootloader
   &kp LCTRL  &none    &none   &none   &kp F6        &kp F7 &kp LEFT  &kp DOWN &kp RIGHT &kp PIPE
   &kp F1     &kp F2   &kp F3  &kp F4  &kp F5        &kp F8 &kp F9    &kp F10  &kp F11   &kp F12
              &none    &kp DEL &kp RET &to 0         &to 1  &kp SPACE &kp BSPC &none
                        >;
                        
                };

                ble_layer {
// -----------------------------------------------------------------------------------------
// | P1  | P2  | P3  | P4  | P5  |   | USB | BLE |     |P ON |P OFF|
// |     |     |     |     |     |   |     |     |     |     |     |
// |Clear|     |     |     |     |   |trans|     |     |     |     |
//       | LENC| DEL | RET | ALP |   | ALP |SPACE| BSPC|RENC |
                        bindings = <
   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4         &out OUT_USB  &out OUT_BLE  &none     &ext_power EP_ON &ext_power EP_OFF
   &none        &none        &none        &none        &none                &none          &none        &none     &none            &none 
   &bt BT_CLR   &none        &none        &none        &none                &trans         &none        &none     &none            &none 
                &none        &kp DEL      &kp RET      &to 0                &to 0          &kp SPACE    &kp BSPC  &none
                        >;
                };
        };
};
